package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.databind.node.TextNode;
import org.metadatacenter.constant.HttpConstants;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.model.CedarCapability;
import org.metadatacenter.server.security.model.IAccountInfo;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.service.UserService;
import org.metadatacenter.util.json.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.mvc.Result;

import java.rmi.AccessException;
import java.util.UUID;

public class UserServerController extends AbstractUserServerController {
  private static Logger log = LoggerFactory.getLogger(UserServerController.class);

  private static UserService<String, String, JsonNode> userService;

  public static void injectUserService(UserService<String, String, JsonNode> us) {
    userService = us;
  }

  public static Result createUser() {
    try {
      IAuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.mustHaveCapability(frontendRequest, CedarCapability.TEMPLATE_ELEMENT_READ);

      ObjectNode user = JsonNodeFactory.instance.objectNode();
      IAccountInfo ai = Authorization.getAccountInfo(frontendRequest);
      user.set("@id", new TextNode(ai.getId()));

      String apiKey = UUID.randomUUID().toString();
      ArrayNode arrayNode = JsonNodeFactory.instance.arrayNode();
      arrayNode.add(apiKey);
      user.set("apiKeys", arrayNode);

      JsonNode createdUser = userService.createUser(user);
      // Remove autogenerated _id field to avoid exposing it
      createdUser = JsonUtils.removeField(createdUser, "_id");
      // Set Location header pointing to the newly created template
      String id = createdUser.get("@id").asText();
      String absoluteUrl = routes.UserServerController.findUser(id).absoluteURL(request());
      response().setHeader(HttpConstants.HTTP_HEADER_LOCATION, absoluteUrl);
      // Return created response
      return created(createdUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  public static Result findUser(String id) {
    try {
      Authorization.mustHaveCapability(CedarAuthFromRequestFactory.fromRequest(request()), CedarCapability
          .TEMPLATE_ELEMENT_READ);
      JsonNode user = userService.findUser(id);

      if (user != null) {
        // Remove autogenerated _id field to avoid exposing it
        user = JsonUtils.removeField(user, "_id");
        return ok(user);
      }
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

}
