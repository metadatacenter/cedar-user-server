package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.metadatacenter.constant.HttpConstants;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.CedarUserRolePermissionUtil;
import org.metadatacenter.server.security.exception.CedarUserNotFoundException;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.security.model.auth.IAccountInfo;
import org.metadatacenter.server.security.model.user.*;
import org.metadatacenter.server.service.UserService;
import org.metadatacenter.util.json.JsonUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.mvc.Result;

import java.rmi.AccessException;
import java.util.Date;
import java.util.UUID;

public class UserServerController extends AbstractUserServerController {
  private static Logger log = LoggerFactory.getLogger(UserServerController.class);

  private static UserService userService;

  public static void injectUserService(UserService us) {
    userService = us;
  }

  public static Result createUser() {
    try {
      IAuthRequest frontendRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.mustHavePermission(frontendRequest, CedarPermission.JUST_AUTHORIZED);

      IAccountInfo ai = Authorization.getAccountInfo(frontendRequest);

      CedarUser user = createUserFromBlueprint(ai.getId(), ai.getFirstName() + " " + ai.getLastName());

      CedarUser u = userService.createUser(user);
      CedarUserRolePermissionUtil.expandRolesIntoPermissions(u);

      ObjectMapper mapper = new ObjectMapper();
      JsonNode createdUser = mapper.valueToTree(u);
      // Remove autogenerated _id field to avoid exposing it
      createdUser = JsonUtils.removeField(createdUser, "_id");
      // Set Location header pointing to the newly created template
      String absoluteUrl = routes.UserServerController.findUser(u.getUserId()).absoluteURL(request());
      response().setHeader(HttpConstants.HTTP_HEADER_LOCATION, absoluteUrl);
      // Return created response
      return created(createdUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  private static CedarUser createUserFromBlueprint(String id, String username) {
    String homePath = "/Users/" + id;
    CedarUser user = new CedarUser();
    user.setUserId(id);
    user.setScreenName(username);
    user.setHomePath(homePath);

    CedarUserApiKey apiKey = new CedarUserApiKey();
    apiKey.setKey(UUID.randomUUID().toString());
    apiKey.setCreationDate(new Date());
    apiKey.setEnabled(true);
    apiKey.setServiceName("CEDAR");
    apiKey.setDescription("Auto-generated apiKey for CEDAR");

    user.getApiKeys().add(apiKey);

    user.getRoles().add(CedarUserRole.TEMPLATE_CREATOR);
    user.getRoles().add(CedarUserRole.TEMPLATE_INSTANTIATOR);

    CedarUserUIFolderView folderView = user.getFolderView();
    folderView.setCurrentPath(homePath);
    folderView.setSortBy("title");
    folderView.setSortDirection(SortOrder.ASC);
    folderView.setViewMode(ViewMode.GRID);

    CedarUserUIResourceTypeFilters resourceTypeFilters = user.getResourceTypeFilters();
    resourceTypeFilters.setField(true);
    resourceTypeFilters.setElement(true);
    resourceTypeFilters.setTemplate(true);
    resourceTypeFilters.setInstance(true);

    CedarUserUIPopulateATemplate populateATemplate = user.getPopulateATemplate();
    populateATemplate.setViewMode(ViewMode.GRID);
    populateATemplate.setSortBy("title");
    populateATemplate.setSortDirection(SortOrder.ASC);
    populateATemplate.setStatus(PopulateATemplateStatus.NORMAL);
    return user;
  }


  public static Result findUser(String id) {
    try {
      Authorization.mustHavePermission(CedarAuthFromRequestFactory.fromRequest(request()), CedarPermission
          .USER_PROFILE_OWN_READ);
      CedarUser u = userService.findUser(id);

      if (u != null) {
        CedarUserRolePermissionUtil.expandRolesIntoPermissions(u);
        ObjectMapper mapper = new ObjectMapper();
        JsonNode user = mapper.valueToTree(u);
        // Remove autogenerated _id field to avoid exposing it
        user = JsonUtils.removeField(user, "_id");
        return ok(user);
      }
      return notFound();
    } catch (CedarUserNotFoundException e) {
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

}
