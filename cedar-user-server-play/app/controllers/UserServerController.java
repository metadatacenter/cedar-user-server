package controllers;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.keycloak.representations.AccessToken;
import org.metadatacenter.constant.HttpConstants;
import org.metadatacenter.server.security.Authorization;
import org.metadatacenter.server.security.CedarAuthFromRequestFactory;
import org.metadatacenter.server.security.CedarUserRolePermissionUtil;
import org.metadatacenter.server.security.KeycloakUtils;
import org.metadatacenter.server.security.exception.CedarUserNotFoundException;
import org.metadatacenter.server.security.exception.InvalidOfflineAccessTokenException;
import org.metadatacenter.server.security.model.IAuthRequest;
import org.metadatacenter.server.security.model.auth.AuthorisedUser;
import org.metadatacenter.server.security.model.auth.CedarPermission;
import org.metadatacenter.server.security.model.user.*;
import org.metadatacenter.server.service.UserService;
import org.metadatacenter.util.mongo.MongoUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import play.mvc.Result;

import java.io.IOException;
import java.rmi.AccessException;
import java.util.Date;
import java.util.UUID;

public class UserServerController extends AbstractUserServerController {
  private static Logger log = LoggerFactory.getLogger(UserServerController.class);

  private static UserService userService;

  private static ObjectMapper MAPPER = new ObjectMapper();

  public static void injectUserService(UserService us) {
    userService = us;
  }

  public static Result createUser() {
    try {
      IAuthRequest authRequest = CedarAuthFromRequestFactory.fromRequest(request());

      AccessToken accessToken = null;
      try {
        accessToken = KeycloakUtils.parseToken(authRequest.getAuthString(), AccessToken.class);
      } catch (IOException e) {
        throw new InvalidOfflineAccessTokenException();
      }
      AuthorisedUser userFromToken = KeycloakUtils.getUserFromToken(accessToken);

      CedarUser user = createUserFromBlueprint(userFromToken.getId(), userFromToken.getFirstName() + " " + userFromToken.getLastName());

      CedarUser u = userService.createUser(user);
      CedarUserRolePermissionUtil.expandRolesIntoPermissions(u);

      JsonNode createdUser = MAPPER.valueToTree(u);
      // Remove autogenerated _id field to avoid exposing it
      MongoUtils.removeIdField(createdUser);
      // Set Location header pointing to the newly created template
      String absoluteUrl = routes.UserServerController.findOwnUser(u.getUserId()).absoluteURL(request());
      response().setHeader(HttpConstants.HTTP_HEADER_LOCATION, absoluteUrl);
      // Return created response
      return created(createdUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  private static CedarUser createUserFromBlueprint(String id, String username) {
    String homePath = "/Users/" + id;
    CedarUser user = new CedarUser();
    user.setUserId(id);
    user.setScreenName(username);
    user.setHomePath(homePath);

    CedarUserApiKey apiKey = new CedarUserApiKey();
    apiKey.setKey(UUID.randomUUID().toString());
    apiKey.setCreationDate(new Date());
    apiKey.setEnabled(true);
    apiKey.setServiceName("CEDAR");
    apiKey.setDescription("Auto-generated apiKey for CEDAR");

    user.getApiKeys().add(apiKey);

    user.getRoles().add(CedarUserRole.TEMPLATE_CREATOR);
    user.getRoles().add(CedarUserRole.TEMPLATE_INSTANTIATOR);

    CedarUserUIFolderView folderView = user.getFolderView();
    folderView.setCurrentPath(homePath);
    folderView.setSortBy("title");
    folderView.setSortDirection(SortOrder.ASC);
    folderView.setViewMode(ViewMode.GRID);

    CedarUserUIResourceTypeFilters resourceTypeFilters = user.getResourceTypeFilters();
    resourceTypeFilters.setField(true);
    resourceTypeFilters.setElement(true);
    resourceTypeFilters.setTemplate(true);
    resourceTypeFilters.setInstance(true);

    CedarUserUIPopulateATemplate populateATemplate = user.getPopulateATemplate();
    populateATemplate.setViewMode(ViewMode.GRID);
    populateATemplate.setOpened(true);
    populateATemplate.setSortBy("title");
    populateATemplate.setSortDirection(SortOrder.ASC);
    return user;
  }


  public static Result findOwnUser(String id) {
    try {
      IAuthRequest authRequest = CedarAuthFromRequestFactory.fromRequest(request());
      CedarUser currentUser = Authorization.getUserAndEnsurePermission(authRequest, CedarPermission.USER_PROFILE_OWN_READ);

      if (!id.equals(currentUser.getUserId())) {
        ObjectNode errorParams = JsonNodeFactory.instance.objectNode();
        errorParams.put("currentUserId", currentUser.getUserId());
        errorParams.put("requestedUserId", id);
        return forbidden(generateErrorDescription("readOtherProfile",
            "You are not allowed to read other user's profile!", errorParams));
      }

      CedarUser u = userService.findUser(id);
      if (u != null) {
        CedarUserRolePermissionUtil.expandRolesIntoPermissions(u);
        JsonNode user = MAPPER.valueToTree(u);
        // Remove autogenerated _id field to avoid exposing it
        MongoUtils.removeIdField(user);
        return ok(user);
      }
      return notFound();
    } catch (CedarUserNotFoundException e) {
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  public static Result findUserSummary(String id) {
    try {
      IAuthRequest authRequest = CedarAuthFromRequestFactory.fromRequest(request());
      Authorization.getUserAndEnsurePermission(authRequest, CedarPermission.LOGGED_IN);

      CedarUser u = userService.findUser(id);
      if (u != null) {
        JsonNode user = MAPPER.valueToTree(u);
        ObjectNode summary = JsonNodeFactory.instance.objectNode();
        summary.set("userId", user.get("userId"));
        summary.set("screenName", user.get("screenName"));
        return ok(summary);
      }
      return notFound();
    } catch (CedarUserNotFoundException e) {
      return notFound();
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }

  public static Result updateUser(String id) {
    try {
      IAuthRequest authRequest = CedarAuthFromRequestFactory.fromRequest(request());
      CedarUser currentUser = Authorization.getUserAndEnsurePermission(authRequest, CedarPermission.LOGGED_IN);

      if (!id.equals(currentUser.getUserId())) {
        ObjectNode errorParams = JsonNodeFactory.instance.objectNode();
        errorParams.put("currentUserId", currentUser.getUserId());
        errorParams.put("requestedUserId", id);
        return forbidden(generateErrorDescription("updateOtherProfile",
            "You are not allowed to update other user's profile!", errorParams));
      }

      JsonNode modifications = request().body().asJson();
      CedarUser u = userService.updateUser(id, modifications);

      CedarUserRolePermissionUtil.expandRolesIntoPermissions(u);

      JsonNode updatedUser = MAPPER.valueToTree(u);
      // Remove autogenerated _id field to avoid exposing it
      MongoUtils.removeIdField(updatedUser);
      return ok(updatedUser);
    } catch (IllegalArgumentException e) {
      return badRequestWithError(e);
    } catch (AccessException e) {
      return forbiddenWithError(e);
    } catch (Exception e) {
      return internalServerErrorWithError(e);
    }
  }


}
