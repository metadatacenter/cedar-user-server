package org.metadatacenter.cedar.user.resources;

import com.codahale.metrics.annotation.Timed;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.github.fge.jsonschema.core.exceptions.ProcessingException;
import org.metadatacenter.config.CedarConfig;
import org.metadatacenter.error.CedarErrorKey;
import org.metadatacenter.exception.CedarException;
import org.metadatacenter.exception.CedarProcessingException;
import org.metadatacenter.rest.context.CedarRequestContext;
import org.metadatacenter.rest.context.CedarRequestContextFactory;
import org.metadatacenter.server.security.CedarUserRolePermissionUtil;
import org.metadatacenter.server.security.model.user.CedarUser;
import org.metadatacenter.server.service.UserService;
import org.metadatacenter.util.CedarUserNameUtil;
import org.metadatacenter.util.http.CedarResponse;
import org.metadatacenter.util.json.JsonMapper;
import org.metadatacenter.util.mongo.MongoUtils;

import javax.management.InstanceNotFoundException;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.*;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.UriInfo;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import static org.metadatacenter.constant.CedarPathParameters.PP_ID;
import static org.metadatacenter.rest.assertion.GenericAssertions.LoggedIn;

@Path("/users")
@Produces(MediaType.APPLICATION_JSON)
public class UsersResource {

  private
  @Context
  UriInfo uriInfo;

  private
  @Context
  HttpServletRequest request;

  private static UserService userService;

  protected final CedarConfig cedarConfig;


  public UsersResource(CedarConfig cedarConfig) {
    this.cedarConfig = cedarConfig;
  }

  public static void injectUserService(UserService us) {
    userService = us;
  }

  @GET
  @Timed
  @Path("/{id}")
  public Response findOwnUser(@PathParam(PP_ID) String id) throws CedarException {
    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);

    c.must(c.user()).be(LoggedIn);

    CedarUser currentUser = c.getCedarUser();

    if (!id.equals(currentUser.getId())) {
      return CedarResponse.forbidden()
          .id(id)
          .errorKey(CedarErrorKey.READ_OTHER_PROFILE_FORBIDDEN)
          .errorMessage("You are not allowed to read other user's profile!")
          .parameter("currentUserId", currentUser.getId())
          .build();
    }

    JsonNode user = JsonMapper.MAPPER.valueToTree(currentUser);
    // Remove autogenerated _id field to avoid exposing it
    MongoUtils.removeIdField(user);

    return Response.ok().entity(user).build();
  }

  @GET
  @Timed
  @Path("/{id}/summary")
  public Response findUserSummary(@PathParam(PP_ID) String id) throws CedarException {
    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);

    c.must(c.user()).be(LoggedIn);

    CedarUser currentUser = c.getCedarUser();

    JsonNode user = JsonMapper.MAPPER.valueToTree(currentUser);
    ObjectNode summary = JsonNodeFactory.instance.objectNode();
    summary.set("userId", user.get("id"));
    summary.set("screenName", JsonNodeFactory.instance.textNode(CedarUserNameUtil.getDisplayName(cedarConfig,
        currentUser)));
    return Response.ok().entity(summary).build();
  }

  @PUT
  @Timed
  @Path("/{id}")
  public Response updateUser(@PathParam(PP_ID) String id) throws CedarException {
    CedarRequestContext c = CedarRequestContextFactory.fromRequest(request);

    c.must(c.user()).be(LoggedIn);

    CedarUser currentUser = c.getCedarUser();

    if (!id.equals(currentUser.getId())) {
      Map<String, Object> errorParams = new HashMap<>();

      return CedarResponse.forbidden()
          .id(id)
          .errorKey(CedarErrorKey.UPDATE_OTHER_PROFILE_FORBIDDEN)
          .errorMessage("You are not allowed to update other user's profile!")
          .parameter("currentUserId", currentUser.getId())
          .build();
    }

    JsonNode modifications = c.request().getRequestBody().asJson();

    CedarUser updatedUser = null;
    try {
      updatedUser = userService.updateUser(id, modifications);
    } catch (Exception e) {
      throw new CedarProcessingException(e);
    }

    CedarUserRolePermissionUtil.expandRolesIntoPermissions(updatedUser);

    JsonNode updatedUserNode = JsonMapper.MAPPER.valueToTree(updatedUser);
    // Remove autogenerated _id field to avoid exposing it
    MongoUtils.removeIdField(updatedUserNode);

    return Response.ok().entity(updatedUserNode).build();
  }
}
